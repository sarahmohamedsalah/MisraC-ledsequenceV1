
ledsequenceV1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005bc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000630  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800060  00800060  00000630  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000630  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000660  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000e0  00000000  00000000  0000069c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000133e  00000000  00000000  0000077c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000872  00000000  00000000  00001aba  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000009da  00000000  00000000  0000232c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000134  00000000  00000000  00002d08  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000055d  00000000  00000000  00002e3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000852  00000000  00000000  00003399  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  00003beb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 32 00 	jmp	0x64	; 0x64 <__ctors_end>
   4:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   8:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
   c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  10:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  14:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  18:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  1c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  20:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  24:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  28:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  2c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  30:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  34:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  38:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  3c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  40:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  44:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  48:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  4c:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  50:	0c 94 44 00 	jmp	0x88	; 0x88 <__bad_interrupt>
  54:	a1 00       	.word	0x00a1	; ????
  56:	b6 00       	.word	0x00b6	; ????
  58:	c7 00       	.word	0x00c7	; ????
  5a:	d8 00       	.word	0x00d8	; ????
  5c:	e9 00       	.word	0x00e9	; ????
  5e:	fa 00       	.word	0x00fa	; ????
  60:	0b 01       	movw	r0, r22
  62:	1c 01       	movw	r2, r24

00000064 <__ctors_end>:
  64:	11 24       	eor	r1, r1
  66:	1f be       	out	0x3f, r1	; 63
  68:	cf e5       	ldi	r28, 0x5F	; 95
  6a:	d8 e0       	ldi	r29, 0x08	; 8
  6c:	de bf       	out	0x3e, r29	; 62
  6e:	cd bf       	out	0x3d, r28	; 61

00000070 <__do_clear_bss>:
  70:	20 e0       	ldi	r18, 0x00	; 0
  72:	a0 e6       	ldi	r26, 0x60	; 96
  74:	b0 e0       	ldi	r27, 0x00	; 0
  76:	01 c0       	rjmp	.+2      	; 0x7a <.do_clear_bss_start>

00000078 <.do_clear_bss_loop>:
  78:	1d 92       	st	X+, r1

0000007a <.do_clear_bss_start>:
  7a:	a2 36       	cpi	r26, 0x62	; 98
  7c:	b2 07       	cpc	r27, r18
  7e:	e1 f7       	brne	.-8      	; 0x78 <.do_clear_bss_loop>
  80:	0e 94 7a 01 	call	0x2f4	; 0x2f4 <main>
  84:	0c 94 dc 02 	jmp	0x5b8	; 0x5b8 <_exit>

00000088 <__bad_interrupt>:
  88:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000008c <APP_init>:
 */ 
#include "app.h"

void APP_init(void)
{
	BUTTON_init(BUTTON_0_PORT, BUTTON_0_Pin);
  8c:	60 e0       	ldi	r22, 0x00	; 0
  8e:	82 e4       	ldi	r24, 0x42	; 66
  90:	0e 94 3a 01 	call	0x274	; 0x274 <BUTTON_init>
	LED_init(LED_0_PORT, LED_0_PIN);
  94:	60 e0       	ldi	r22, 0x00	; 0
  96:	81 e4       	ldi	r24, 0x41	; 65
  98:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_init>
	LED_init(LED_1_PORT, LED_1_PIN);
  9c:	61 e0       	ldi	r22, 0x01	; 1
  9e:	81 e4       	ldi	r24, 0x41	; 65
  a0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_init>
	LED_init(LED_2_PORT, LED_2_PIN);
  a4:	62 e0       	ldi	r22, 0x02	; 2
  a6:	81 e4       	ldi	r24, 0x41	; 65
  a8:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_init>
	LED_init(LED_3_PORT, LED_3_PIN);
  ac:	63 e0       	ldi	r22, 0x03	; 3
  ae:	81 e4       	ldi	r24, 0x41	; 65
  b0:	0e 94 53 01 	call	0x2a6	; 0x2a6 <LED_init>
	LED_off(LED_0_PORT, LED_0_PIN);
  b4:	60 e0       	ldi	r22, 0x00	; 0
  b6:	81 e4       	ldi	r24, 0x41	; 65
  b8:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
	LED_off(LED_1_PORT, LED_1_PIN);
  bc:	61 e0       	ldi	r22, 0x01	; 1
  be:	81 e4       	ldi	r24, 0x41	; 65
  c0:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
	LED_off(LED_2_PORT, LED_2_PIN);
  c4:	62 e0       	ldi	r22, 0x02	; 2
  c6:	81 e4       	ldi	r24, 0x41	; 65
  c8:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
	LED_off(LED_3_PORT, LED_3_PIN);
  cc:	63 e0       	ldi	r22, 0x03	; 3
  ce:	81 e4       	ldi	r24, 0x41	; 65
  d0:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
  d4:	08 95       	ret

000000d6 <APP_ledSequenceV_1>:

void APP_ledSequenceV_1 (void)
{
	static uint8_t  counter;
	static uint8_t buttonState = 0;
	BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
  d6:	41 e6       	ldi	r20, 0x61	; 97
  d8:	50 e0       	ldi	r21, 0x00	; 0
  da:	60 e0       	ldi	r22, 0x00	; 0
  dc:	82 e4       	ldi	r24, 0x42	; 66
  de:	0e 94 47 01 	call	0x28e	; 0x28e <BUTTON_read>
	if (buttonState)
  e2:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <buttonState.1674>
  e6:	88 23       	and	r24, r24
  e8:	09 f4       	brne	.+2      	; 0xec <APP_ledSequenceV_1+0x16>
  ea:	c3 c0       	rjmp	.+390    	; 0x272 <APP_ledSequenceV_1+0x19c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ec:	2f ef       	ldi	r18, 0xFF	; 255
  ee:	8d ee       	ldi	r24, 0xED	; 237
  f0:	92 e0       	ldi	r25, 0x02	; 2
  f2:	21 50       	subi	r18, 0x01	; 1
  f4:	80 40       	sbci	r24, 0x00	; 0
  f6:	90 40       	sbci	r25, 0x00	; 0
  f8:	e1 f7       	brne	.-8      	; 0xf2 <APP_ledSequenceV_1+0x1c>
  fa:	00 c0       	rjmp	.+0      	; 0xfc <APP_ledSequenceV_1+0x26>
  fc:	00 00       	nop
	{
		_delay_ms(60);
		BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
  fe:	41 e6       	ldi	r20, 0x61	; 97
 100:	50 e0       	ldi	r21, 0x00	; 0
 102:	60 e0       	ldi	r22, 0x00	; 0
 104:	82 e4       	ldi	r24, 0x42	; 66
 106:	0e 94 47 01 	call	0x28e	; 0x28e <BUTTON_read>
		if(buttonState)
 10a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <buttonState.1674>
 10e:	88 23       	and	r24, r24
 110:	09 f4       	brne	.+2      	; 0x114 <APP_ledSequenceV_1+0x3e>
 112:	af c0       	rjmp	.+350    	; 0x272 <APP_ledSequenceV_1+0x19c>
		{
			BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
 114:	41 e6       	ldi	r20, 0x61	; 97
 116:	50 e0       	ldi	r21, 0x00	; 0
 118:	60 e0       	ldi	r22, 0x00	; 0
 11a:	82 e4       	ldi	r24, 0x42	; 66
 11c:	0e 94 47 01 	call	0x28e	; 0x28e <BUTTON_read>
			counter++;
 120:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 124:	e1 e0       	ldi	r30, 0x01	; 1
 126:	e8 0f       	add	r30, r24
 128:	e0 93 60 00 	sts	0x0060, r30	; 0x800060 <_edata>
			switch(counter)
 12c:	8e 2f       	mov	r24, r30
 12e:	90 e0       	ldi	r25, 0x00	; 0
 130:	fc 01       	movw	r30, r24
 132:	31 97       	sbiw	r30, 0x01	; 1
 134:	e8 30       	cpi	r30, 0x08	; 8
 136:	f1 05       	cpc	r31, r1
 138:	a0 f4       	brcc	.+40     	; 0x162 <APP_ledSequenceV_1+0x8c>
 13a:	e6 5d       	subi	r30, 0xD6	; 214
 13c:	ff 4f       	sbci	r31, 0xFF	; 255
 13e:	0c 94 d6 02 	jmp	0x5ac	; 0x5ac <__tablejump2__>
			{
				case 1:
				LED_on(LED_0_PORT, LED_0_PIN);
 142:	60 e0       	ldi	r22, 0x00	; 0
 144:	81 e4       	ldi	r24, 0x41	; 65
 146:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_off(LED_1_PORT, LED_1_PIN);
 14a:	61 e0       	ldi	r22, 0x01	; 1
 14c:	81 e4       	ldi	r24, 0x41	; 65
 14e:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_2_PORT, LED_2_PIN);
 152:	62 e0       	ldi	r22, 0x02	; 2
 154:	81 e4       	ldi	r24, 0x41	; 65
 156:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_3_PORT, LED_3_PIN);
 15a:	63 e0       	ldi	r22, 0x03	; 3
 15c:	81 e4       	ldi	r24, 0x41	; 65
 15e:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				
				default:
				break;
				
			}
			while(buttonState)
 162:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <buttonState.1674>
 166:	81 11       	cpse	r24, r1
 168:	7a c0       	rjmp	.+244    	; 0x25e <APP_ledSequenceV_1+0x188>
 16a:	08 95       	ret
				LED_off(LED_2_PORT, LED_2_PIN);
				LED_off(LED_3_PORT, LED_3_PIN);
				break;
				
				case 2:
				LED_on(LED_0_PORT, LED_0_PIN);
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	81 e4       	ldi	r24, 0x41	; 65
 170:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_1_PORT, LED_1_PIN);
 174:	61 e0       	ldi	r22, 0x01	; 1
 176:	81 e4       	ldi	r24, 0x41	; 65
 178:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_off(LED_2_PORT, LED_2_PIN);
 17c:	62 e0       	ldi	r22, 0x02	; 2
 17e:	81 e4       	ldi	r24, 0x41	; 65
 180:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_3_PORT, LED_3_PIN);
 184:	63 e0       	ldi	r22, 0x03	; 3
 186:	81 e4       	ldi	r24, 0x41	; 65
 188:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				break;
 18c:	ea cf       	rjmp	.-44     	; 0x162 <APP_ledSequenceV_1+0x8c>
				
				case 3:
				LED_on(LED_0_PORT, LED_0_PIN);
 18e:	60 e0       	ldi	r22, 0x00	; 0
 190:	81 e4       	ldi	r24, 0x41	; 65
 192:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_1_PORT, LED_1_PIN);
 196:	61 e0       	ldi	r22, 0x01	; 1
 198:	81 e4       	ldi	r24, 0x41	; 65
 19a:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_2_PORT, LED_2_PIN);
 19e:	62 e0       	ldi	r22, 0x02	; 2
 1a0:	81 e4       	ldi	r24, 0x41	; 65
 1a2:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_off(LED_3_PORT, LED_3_PIN);
 1a6:	63 e0       	ldi	r22, 0x03	; 3
 1a8:	81 e4       	ldi	r24, 0x41	; 65
 1aa:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				break;
 1ae:	d9 cf       	rjmp	.-78     	; 0x162 <APP_ledSequenceV_1+0x8c>
				
				case 4:
				LED_on(LED_0_PORT, LED_0_PIN);
 1b0:	60 e0       	ldi	r22, 0x00	; 0
 1b2:	81 e4       	ldi	r24, 0x41	; 65
 1b4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_1_PORT, LED_1_PIN);
 1b8:	61 e0       	ldi	r22, 0x01	; 1
 1ba:	81 e4       	ldi	r24, 0x41	; 65
 1bc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_2_PORT, LED_2_PIN);
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	81 e4       	ldi	r24, 0x41	; 65
 1c4:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_3_PORT, LED_3_PIN);
 1c8:	63 e0       	ldi	r22, 0x03	; 3
 1ca:	81 e4       	ldi	r24, 0x41	; 65
 1cc:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				break;
 1d0:	c8 cf       	rjmp	.-112    	; 0x162 <APP_ledSequenceV_1+0x8c>
				
				case 5:
				LED_off(LED_0_PORT, LED_0_PIN);
 1d2:	60 e0       	ldi	r22, 0x00	; 0
 1d4:	81 e4       	ldi	r24, 0x41	; 65
 1d6:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_on(LED_1_PORT, LED_1_PIN);
 1da:	61 e0       	ldi	r22, 0x01	; 1
 1dc:	81 e4       	ldi	r24, 0x41	; 65
 1de:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_2_PORT, LED_2_PIN);
 1e2:	62 e0       	ldi	r22, 0x02	; 2
 1e4:	81 e4       	ldi	r24, 0x41	; 65
 1e6:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_3_PORT, LED_3_PIN);
 1ea:	63 e0       	ldi	r22, 0x03	; 3
 1ec:	81 e4       	ldi	r24, 0x41	; 65
 1ee:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				break;
 1f2:	b7 cf       	rjmp	.-146    	; 0x162 <APP_ledSequenceV_1+0x8c>
				
				case 6:
				LED_off(LED_0_PORT, LED_0_PIN);
 1f4:	60 e0       	ldi	r22, 0x00	; 0
 1f6:	81 e4       	ldi	r24, 0x41	; 65
 1f8:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_1_PORT, LED_1_PIN);
 1fc:	61 e0       	ldi	r22, 0x01	; 1
 1fe:	81 e4       	ldi	r24, 0x41	; 65
 200:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_on(LED_2_PORT, LED_2_PIN);
 204:	62 e0       	ldi	r22, 0x02	; 2
 206:	81 e4       	ldi	r24, 0x41	; 65
 208:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				LED_on(LED_3_PORT, LED_3_PIN);
 20c:	63 e0       	ldi	r22, 0x03	; 3
 20e:	81 e4       	ldi	r24, 0x41	; 65
 210:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				break;
 214:	a6 cf       	rjmp	.-180    	; 0x162 <APP_ledSequenceV_1+0x8c>
				
				case 7:
				LED_off(LED_0_PORT, LED_0_PIN);
 216:	60 e0       	ldi	r22, 0x00	; 0
 218:	81 e4       	ldi	r24, 0x41	; 65
 21a:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_1_PORT, LED_1_PIN);
 21e:	61 e0       	ldi	r22, 0x01	; 1
 220:	81 e4       	ldi	r24, 0x41	; 65
 222:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_2_PORT, LED_2_PIN);
 226:	62 e0       	ldi	r22, 0x02	; 2
 228:	81 e4       	ldi	r24, 0x41	; 65
 22a:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_on(LED_3_PORT, LED_3_PIN);
 22e:	63 e0       	ldi	r22, 0x03	; 3
 230:	81 e4       	ldi	r24, 0x41	; 65
 232:	0e 94 60 01 	call	0x2c0	; 0x2c0 <LED_on>
				break;
 236:	95 cf       	rjmp	.-214    	; 0x162 <APP_ledSequenceV_1+0x8c>
				
				case 8:
				LED_off(LED_0_PORT, LED_0_PIN);
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	81 e4       	ldi	r24, 0x41	; 65
 23c:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_1_PORT, LED_1_PIN);
 240:	61 e0       	ldi	r22, 0x01	; 1
 242:	81 e4       	ldi	r24, 0x41	; 65
 244:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_2_PORT, LED_2_PIN);
 248:	62 e0       	ldi	r22, 0x02	; 2
 24a:	81 e4       	ldi	r24, 0x41	; 65
 24c:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				LED_off(LED_3_PORT, LED_3_PIN);
 250:	63 e0       	ldi	r22, 0x03	; 3
 252:	81 e4       	ldi	r24, 0x41	; 65
 254:	0e 94 6d 01 	call	0x2da	; 0x2da <LED_off>
				counter = 0;	break;
 258:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <_edata>
 25c:	82 cf       	rjmp	.-252    	; 0x162 <APP_ledSequenceV_1+0x8c>
				break;
				
			}
			while(buttonState)
			{
				BUTTON_read(BUTTON_0_PORT, BUTTON_0_Pin, &buttonState);
 25e:	41 e6       	ldi	r20, 0x61	; 97
 260:	50 e0       	ldi	r21, 0x00	; 0
 262:	60 e0       	ldi	r22, 0x00	; 0
 264:	82 e4       	ldi	r24, 0x42	; 66
 266:	0e 94 47 01 	call	0x28e	; 0x28e <BUTTON_read>
				
				default:
				break;
				
			}
			while(buttonState)
 26a:	80 91 61 00 	lds	r24, 0x0061	; 0x800061 <buttonState.1674>
 26e:	81 11       	cpse	r24, r1
 270:	f6 cf       	rjmp	.-20     	; 0x25e <APP_ledSequenceV_1+0x188>
 272:	08 95       	ret

00000274 <BUTTON_init>:


EN_buttonError_t BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	EN_buttonError_t error = BUTTON_OK;
	if (buttonPort > PORT_D)
 274:	85 34       	cpi	r24, 0x45	; 69
 276:	38 f4       	brcc	.+14     	; 0x286 <BUTTON_init+0x12>
	{
		error = WRONG_BUTTON_PORT;
	}
	else if (buttonPin > 7)
 278:	68 30       	cpi	r22, 0x08	; 8
 27a:	38 f4       	brcc	.+14     	; 0x28a <BUTTON_init+0x16>
	{
		error = WRONG_BUTTON_PIN;
	}
	else
	{
		DIO_init(buttonPort, buttonPin, INPUT);
 27c:	40 e0       	ldi	r20, 0x00	; 0
 27e:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_init>
		error = BUTTON_OK;
 282:	80 e0       	ldi	r24, 0x00	; 0
 284:	08 95       	ret
EN_buttonError_t BUTTON_init(uint8_t buttonPort, uint8_t buttonPin)
{
	EN_buttonError_t error = BUTTON_OK;
	if (buttonPort > PORT_D)
	{
		error = WRONG_BUTTON_PORT;
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	08 95       	ret
	}
	else if (buttonPin > 7)
	{
		error = WRONG_BUTTON_PIN;
 28a:	82 e0       	ldi	r24, 0x02	; 2
		DIO_init(buttonPort, buttonPin, INPUT);
		error = BUTTON_OK;
	}
	
	return error;
}
 28c:	08 95       	ret

0000028e <BUTTON_read>:

EN_buttonError_t BUTTON_read(uint8_t buttonPort, uint8_t buttonPin, uint8_t *buttonState)
{
	EN_buttonError_t error = BUTTON_OK;
	if (buttonPort > PORT_D)
 28e:	85 34       	cpi	r24, 0x45	; 69
 290:	30 f4       	brcc	.+12     	; 0x29e <BUTTON_read+0x10>
	{
		error = WRONG_BUTTON_PORT;
	}
	else if (buttonPin > 7)
 292:	68 30       	cpi	r22, 0x08	; 8
 294:	30 f4       	brcc	.+12     	; 0x2a2 <BUTTON_read+0x14>
	{
		error = WRONG_BUTTON_PIN;
	}
	else
	{
		DIO_read(buttonPort, buttonPin, buttonState);
 296:	0e 94 95 02 	call	0x52a	; 0x52a <DIO_read>
		error = BUTTON_OK;
 29a:	80 e0       	ldi	r24, 0x00	; 0
 29c:	08 95       	ret
EN_buttonError_t BUTTON_read(uint8_t buttonPort, uint8_t buttonPin, uint8_t *buttonState)
{
	EN_buttonError_t error = BUTTON_OK;
	if (buttonPort > PORT_D)
	{
		error = WRONG_BUTTON_PORT;
 29e:	81 e0       	ldi	r24, 0x01	; 1
 2a0:	08 95       	ret
	}
	else if (buttonPin > 7)
	{
		error = WRONG_BUTTON_PIN;
 2a2:	82 e0       	ldi	r24, 0x02	; 2
		DIO_read(buttonPort, buttonPin, buttonState);
		error = BUTTON_OK;
	}
	
	return error;
 2a4:	08 95       	ret

000002a6 <LED_init>:


EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
 2a6:	85 34       	cpi	r24, 0x45	; 69
 2a8:	38 f4       	brcc	.+14     	; 0x2b8 <LED_init+0x12>
	{
		error = WRONG_LED_PORT;
	}
	else if (ledPin > 7)
 2aa:	68 30       	cpi	r22, 0x08	; 8
 2ac:	38 f4       	brcc	.+14     	; 0x2bc <LED_init+0x16>
	{
		error = WRONG_LED_PIN;
	}
	else
	{
		DIO_init(ledPort, ledPin, OUTPUT);
 2ae:	41 e0       	ldi	r20, 0x01	; 1
 2b0:	0e 94 7f 01 	call	0x2fe	; 0x2fe <DIO_init>
		error = LED_OK;
 2b4:	80 e0       	ldi	r24, 0x00	; 0
 2b6:	08 95       	ret
EN_ledError_t LED_init(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
	{
		error = WRONG_LED_PORT;
 2b8:	81 e0       	ldi	r24, 0x01	; 1
 2ba:	08 95       	ret
	}
	else if (ledPin > 7)
	{
		error = WRONG_LED_PIN;
 2bc:	82 e0       	ldi	r24, 0x02	; 2
		DIO_init(ledPort, ledPin, OUTPUT);
		error = LED_OK;
	}
	
	return error;
}
 2be:	08 95       	ret

000002c0 <LED_on>:

EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
 2c0:	85 34       	cpi	r24, 0x45	; 69
 2c2:	38 f4       	brcc	.+14     	; 0x2d2 <LED_on+0x12>
	{
		error = WRONG_LED_PORT;
	}
	else if (ledPin > 7)
 2c4:	68 30       	cpi	r22, 0x08	; 8
 2c6:	38 f4       	brcc	.+14     	; 0x2d6 <LED_on+0x16>
	{
		error = WRONG_LED_PIN;
	}
	else
	{
		DIO_write(ledPort,ledPin, HIGH);
 2c8:	41 e0       	ldi	r20, 0x01	; 1
 2ca:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_write>
		error = LED_OK;
 2ce:	80 e0       	ldi	r24, 0x00	; 0
 2d0:	08 95       	ret
EN_ledError_t LED_on(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
	{
		error = WRONG_LED_PORT;
 2d2:	81 e0       	ldi	r24, 0x01	; 1
 2d4:	08 95       	ret
	}
	else if (ledPin > 7)
	{
		error = WRONG_LED_PIN;
 2d6:	82 e0       	ldi	r24, 0x02	; 2
		DIO_write(ledPort,ledPin, HIGH);
		error = LED_OK;
	}
	
	return error;
}
 2d8:	08 95       	ret

000002da <LED_off>:

EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
 2da:	85 34       	cpi	r24, 0x45	; 69
 2dc:	38 f4       	brcc	.+14     	; 0x2ec <LED_off+0x12>
	{
		error = WRONG_LED_PORT;
	}
	else if (ledPin > 7)
 2de:	68 30       	cpi	r22, 0x08	; 8
 2e0:	38 f4       	brcc	.+14     	; 0x2f0 <LED_off+0x16>
	{
		error = WRONG_LED_PIN;
	}
	else
	{
		DIO_write(ledPort,ledPin, LOW);
 2e2:	40 e0       	ldi	r20, 0x00	; 0
 2e4:	0e 94 0a 02 	call	0x414	; 0x414 <DIO_write>
		error = LED_OK;
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	08 95       	ret
EN_ledError_t LED_off(uint8_t ledPort,uint8_t ledPin)
{
	EN_ledError_t error = LED_OK;
	if (ledPort > PORT_D)
	{
		error = WRONG_LED_PORT;
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	08 95       	ret
	}
	else if (ledPin > 7)
	{
		error = WRONG_LED_PIN;
 2f0:	82 e0       	ldi	r24, 0x02	; 2
		DIO_write(ledPort,ledPin, LOW);
		error = LED_OK;
	}
	
	return error;
}
 2f2:	08 95       	ret

000002f4 <main>:
#include "Application/app.h"


int main(void)
{
    APP_init();
 2f4:	0e 94 46 00 	call	0x8c	; 0x8c <APP_init>
    while (1) 
    {
		APP_ledSequenceV_1();
 2f8:	0e 94 6b 00 	call	0xd6	; 0xd6 <APP_ledSequenceV_1>
    }
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <main+0x4>

000002fe <DIO_init>:
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
}
 2fe:	68 30       	cpi	r22, 0x08	; 8
 300:	08 f0       	brcs	.+2      	; 0x304 <DIO_init+0x6>
 302:	80 c0       	rjmp	.+256    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 304:	44 23       	and	r20, r20
 306:	21 f0       	breq	.+8      	; 0x310 <DIO_init+0x12>
 308:	41 30       	cpi	r20, 0x01	; 1
 30a:	09 f4       	brne	.+2      	; 0x30e <DIO_init+0x10>
 30c:	40 c0       	rjmp	.+128    	; 0x38e <DIO_init+0x90>
 30e:	7c c0       	rjmp	.+248    	; 0x408 <__LOCK_REGION_LENGTH__+0x8>
 310:	82 34       	cpi	r24, 0x42	; 66
 312:	b1 f0       	breq	.+44     	; 0x340 <DIO_init+0x42>
 314:	18 f4       	brcc	.+6      	; 0x31c <DIO_init+0x1e>
 316:	81 34       	cpi	r24, 0x41	; 65
 318:	31 f0       	breq	.+12     	; 0x326 <DIO_init+0x28>
 31a:	78 c0       	rjmp	.+240    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 31c:	83 34       	cpi	r24, 0x43	; 67
 31e:	e9 f0       	breq	.+58     	; 0x35a <DIO_init+0x5c>
 320:	84 34       	cpi	r24, 0x44	; 68
 322:	41 f1       	breq	.+80     	; 0x374 <DIO_init+0x76>
 324:	73 c0       	rjmp	.+230    	; 0x40c <__LOCK_REGION_LENGTH__+0xc>
 326:	2a b3       	in	r18, 0x1a	; 26
 328:	81 e0       	ldi	r24, 0x01	; 1
 32a:	90 e0       	ldi	r25, 0x00	; 0
 32c:	02 c0       	rjmp	.+4      	; 0x332 <DIO_init+0x34>
 32e:	88 0f       	add	r24, r24
 330:	99 1f       	adc	r25, r25
 332:	6a 95       	dec	r22
 334:	e2 f7       	brpl	.-8      	; 0x32e <DIO_init+0x30>
 336:	80 95       	com	r24
 338:	82 23       	and	r24, r18
 33a:	8a bb       	out	0x1a, r24	; 26
 33c:	80 e0       	ldi	r24, 0x00	; 0
 33e:	08 95       	ret
 340:	27 b3       	in	r18, 0x17	; 23
 342:	81 e0       	ldi	r24, 0x01	; 1
 344:	90 e0       	ldi	r25, 0x00	; 0
 346:	02 c0       	rjmp	.+4      	; 0x34c <DIO_init+0x4e>
 348:	88 0f       	add	r24, r24
 34a:	99 1f       	adc	r25, r25
 34c:	6a 95       	dec	r22
 34e:	e2 f7       	brpl	.-8      	; 0x348 <DIO_init+0x4a>
 350:	80 95       	com	r24
 352:	82 23       	and	r24, r18
 354:	87 bb       	out	0x17, r24	; 23
 356:	80 e0       	ldi	r24, 0x00	; 0
 358:	08 95       	ret
 35a:	24 b3       	in	r18, 0x14	; 20
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	90 e0       	ldi	r25, 0x00	; 0
 360:	02 c0       	rjmp	.+4      	; 0x366 <DIO_init+0x68>
 362:	88 0f       	add	r24, r24
 364:	99 1f       	adc	r25, r25
 366:	6a 95       	dec	r22
 368:	e2 f7       	brpl	.-8      	; 0x362 <DIO_init+0x64>
 36a:	80 95       	com	r24
 36c:	82 23       	and	r24, r18
 36e:	84 bb       	out	0x14, r24	; 20
 370:	80 e0       	ldi	r24, 0x00	; 0
 372:	08 95       	ret
 374:	21 b3       	in	r18, 0x11	; 17
 376:	81 e0       	ldi	r24, 0x01	; 1
 378:	90 e0       	ldi	r25, 0x00	; 0
 37a:	02 c0       	rjmp	.+4      	; 0x380 <DIO_init+0x82>
 37c:	88 0f       	add	r24, r24
 37e:	99 1f       	adc	r25, r25
 380:	6a 95       	dec	r22
 382:	e2 f7       	brpl	.-8      	; 0x37c <DIO_init+0x7e>
 384:	80 95       	com	r24
 386:	82 23       	and	r24, r18
 388:	81 bb       	out	0x11, r24	; 17
 38a:	80 e0       	ldi	r24, 0x00	; 0
 38c:	08 95       	ret
 38e:	82 34       	cpi	r24, 0x42	; 66
 390:	a9 f0       	breq	.+42     	; 0x3bc <DIO_init+0xbe>
 392:	18 f4       	brcc	.+6      	; 0x39a <DIO_init+0x9c>
 394:	81 34       	cpi	r24, 0x41	; 65
 396:	31 f0       	breq	.+12     	; 0x3a4 <DIO_init+0xa6>
 398:	3b c0       	rjmp	.+118    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 39a:	83 34       	cpi	r24, 0x43	; 67
 39c:	d9 f0       	breq	.+54     	; 0x3d4 <DIO_init+0xd6>
 39e:	84 34       	cpi	r24, 0x44	; 68
 3a0:	29 f1       	breq	.+74     	; 0x3ec <DIO_init+0xee>
 3a2:	36 c0       	rjmp	.+108    	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
 3a4:	2a b3       	in	r18, 0x1a	; 26
 3a6:	81 e0       	ldi	r24, 0x01	; 1
 3a8:	90 e0       	ldi	r25, 0x00	; 0
 3aa:	02 c0       	rjmp	.+4      	; 0x3b0 <DIO_init+0xb2>
 3ac:	88 0f       	add	r24, r24
 3ae:	99 1f       	adc	r25, r25
 3b0:	6a 95       	dec	r22
 3b2:	e2 f7       	brpl	.-8      	; 0x3ac <DIO_init+0xae>
 3b4:	82 2b       	or	r24, r18
 3b6:	8a bb       	out	0x1a, r24	; 26
 3b8:	80 e0       	ldi	r24, 0x00	; 0
 3ba:	08 95       	ret
 3bc:	27 b3       	in	r18, 0x17	; 23
 3be:	81 e0       	ldi	r24, 0x01	; 1
 3c0:	90 e0       	ldi	r25, 0x00	; 0
 3c2:	02 c0       	rjmp	.+4      	; 0x3c8 <DIO_init+0xca>
 3c4:	88 0f       	add	r24, r24
 3c6:	99 1f       	adc	r25, r25
 3c8:	6a 95       	dec	r22
 3ca:	e2 f7       	brpl	.-8      	; 0x3c4 <DIO_init+0xc6>
 3cc:	82 2b       	or	r24, r18
 3ce:	87 bb       	out	0x17, r24	; 23
 3d0:	80 e0       	ldi	r24, 0x00	; 0
 3d2:	08 95       	ret
 3d4:	24 b3       	in	r18, 0x14	; 20
 3d6:	81 e0       	ldi	r24, 0x01	; 1
 3d8:	90 e0       	ldi	r25, 0x00	; 0
 3da:	02 c0       	rjmp	.+4      	; 0x3e0 <DIO_init+0xe2>
 3dc:	88 0f       	add	r24, r24
 3de:	99 1f       	adc	r25, r25
 3e0:	6a 95       	dec	r22
 3e2:	e2 f7       	brpl	.-8      	; 0x3dc <DIO_init+0xde>
 3e4:	82 2b       	or	r24, r18
 3e6:	84 bb       	out	0x14, r24	; 20
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	08 95       	ret
 3ec:	21 b3       	in	r18, 0x11	; 17
 3ee:	81 e0       	ldi	r24, 0x01	; 1
 3f0:	90 e0       	ldi	r25, 0x00	; 0
 3f2:	02 c0       	rjmp	.+4      	; 0x3f8 <DIO_init+0xfa>
 3f4:	88 0f       	add	r24, r24
 3f6:	99 1f       	adc	r25, r25
 3f8:	6a 95       	dec	r22
 3fa:	e2 f7       	brpl	.-8      	; 0x3f4 <DIO_init+0xf6>
 3fc:	82 2b       	or	r24, r18
 3fe:	81 bb       	out	0x11, r24	; 17
 400:	80 e0       	ldi	r24, 0x00	; 0
 402:	08 95       	ret
 404:	82 e0       	ldi	r24, 0x02	; 2
 406:	08 95       	ret
 408:	84 e0       	ldi	r24, 0x04	; 4
 40a:	08 95       	ret
 40c:	81 e0       	ldi	r24, 0x01	; 1
 40e:	08 95       	ret
 410:	81 e0       	ldi	r24, 0x01	; 1
 412:	08 95       	ret

00000414 <DIO_write>:
 414:	68 30       	cpi	r22, 0x08	; 8
 416:	08 f0       	brcs	.+2      	; 0x41a <DIO_write+0x6>
 418:	80 c0       	rjmp	.+256    	; 0x51a <DIO_write+0x106>
 41a:	44 23       	and	r20, r20
 41c:	21 f0       	breq	.+8      	; 0x426 <DIO_write+0x12>
 41e:	41 30       	cpi	r20, 0x01	; 1
 420:	09 f4       	brne	.+2      	; 0x424 <DIO_write+0x10>
 422:	40 c0       	rjmp	.+128    	; 0x4a4 <DIO_write+0x90>
 424:	7c c0       	rjmp	.+248    	; 0x51e <DIO_write+0x10a>
 426:	82 34       	cpi	r24, 0x42	; 66
 428:	b1 f0       	breq	.+44     	; 0x456 <DIO_write+0x42>
 42a:	18 f4       	brcc	.+6      	; 0x432 <DIO_write+0x1e>
 42c:	81 34       	cpi	r24, 0x41	; 65
 42e:	31 f0       	breq	.+12     	; 0x43c <DIO_write+0x28>
 430:	78 c0       	rjmp	.+240    	; 0x522 <DIO_write+0x10e>
 432:	83 34       	cpi	r24, 0x43	; 67
 434:	e9 f0       	breq	.+58     	; 0x470 <DIO_write+0x5c>
 436:	84 34       	cpi	r24, 0x44	; 68
 438:	41 f1       	breq	.+80     	; 0x48a <DIO_write+0x76>
 43a:	73 c0       	rjmp	.+230    	; 0x522 <DIO_write+0x10e>
 43c:	2b b3       	in	r18, 0x1b	; 27
 43e:	81 e0       	ldi	r24, 0x01	; 1
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	02 c0       	rjmp	.+4      	; 0x448 <DIO_write+0x34>
 444:	88 0f       	add	r24, r24
 446:	99 1f       	adc	r25, r25
 448:	6a 95       	dec	r22
 44a:	e2 f7       	brpl	.-8      	; 0x444 <DIO_write+0x30>
 44c:	80 95       	com	r24
 44e:	82 23       	and	r24, r18
 450:	8b bb       	out	0x1b, r24	; 27
 452:	80 e0       	ldi	r24, 0x00	; 0
 454:	08 95       	ret
 456:	28 b3       	in	r18, 0x18	; 24
 458:	81 e0       	ldi	r24, 0x01	; 1
 45a:	90 e0       	ldi	r25, 0x00	; 0
 45c:	02 c0       	rjmp	.+4      	; 0x462 <DIO_write+0x4e>
 45e:	88 0f       	add	r24, r24
 460:	99 1f       	adc	r25, r25
 462:	6a 95       	dec	r22
 464:	e2 f7       	brpl	.-8      	; 0x45e <DIO_write+0x4a>
 466:	80 95       	com	r24
 468:	82 23       	and	r24, r18
 46a:	88 bb       	out	0x18, r24	; 24
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	08 95       	ret
 470:	25 b3       	in	r18, 0x15	; 21
 472:	81 e0       	ldi	r24, 0x01	; 1
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	02 c0       	rjmp	.+4      	; 0x47c <DIO_write+0x68>
 478:	88 0f       	add	r24, r24
 47a:	99 1f       	adc	r25, r25
 47c:	6a 95       	dec	r22
 47e:	e2 f7       	brpl	.-8      	; 0x478 <DIO_write+0x64>
 480:	80 95       	com	r24
 482:	82 23       	and	r24, r18
 484:	85 bb       	out	0x15, r24	; 21
 486:	80 e0       	ldi	r24, 0x00	; 0
 488:	08 95       	ret
 48a:	22 b3       	in	r18, 0x12	; 18
 48c:	81 e0       	ldi	r24, 0x01	; 1
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	02 c0       	rjmp	.+4      	; 0x496 <DIO_write+0x82>
 492:	88 0f       	add	r24, r24
 494:	99 1f       	adc	r25, r25
 496:	6a 95       	dec	r22
 498:	e2 f7       	brpl	.-8      	; 0x492 <DIO_write+0x7e>
 49a:	80 95       	com	r24
 49c:	82 23       	and	r24, r18
 49e:	82 bb       	out	0x12, r24	; 18
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	08 95       	ret
 4a4:	82 34       	cpi	r24, 0x42	; 66
 4a6:	a9 f0       	breq	.+42     	; 0x4d2 <DIO_write+0xbe>
 4a8:	18 f4       	brcc	.+6      	; 0x4b0 <DIO_write+0x9c>
 4aa:	81 34       	cpi	r24, 0x41	; 65
 4ac:	31 f0       	breq	.+12     	; 0x4ba <DIO_write+0xa6>
 4ae:	3b c0       	rjmp	.+118    	; 0x526 <DIO_write+0x112>
 4b0:	83 34       	cpi	r24, 0x43	; 67
 4b2:	d9 f0       	breq	.+54     	; 0x4ea <DIO_write+0xd6>
 4b4:	84 34       	cpi	r24, 0x44	; 68
 4b6:	29 f1       	breq	.+74     	; 0x502 <DIO_write+0xee>
 4b8:	36 c0       	rjmp	.+108    	; 0x526 <DIO_write+0x112>
 4ba:	2b b3       	in	r18, 0x1b	; 27
 4bc:	81 e0       	ldi	r24, 0x01	; 1
 4be:	90 e0       	ldi	r25, 0x00	; 0
 4c0:	02 c0       	rjmp	.+4      	; 0x4c6 <DIO_write+0xb2>
 4c2:	88 0f       	add	r24, r24
 4c4:	99 1f       	adc	r25, r25
 4c6:	6a 95       	dec	r22
 4c8:	e2 f7       	brpl	.-8      	; 0x4c2 <DIO_write+0xae>
 4ca:	82 2b       	or	r24, r18
 4cc:	8b bb       	out	0x1b, r24	; 27
 4ce:	80 e0       	ldi	r24, 0x00	; 0
 4d0:	08 95       	ret
 4d2:	28 b3       	in	r18, 0x18	; 24
 4d4:	81 e0       	ldi	r24, 0x01	; 1
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	02 c0       	rjmp	.+4      	; 0x4de <DIO_write+0xca>
 4da:	88 0f       	add	r24, r24
 4dc:	99 1f       	adc	r25, r25
 4de:	6a 95       	dec	r22
 4e0:	e2 f7       	brpl	.-8      	; 0x4da <DIO_write+0xc6>
 4e2:	82 2b       	or	r24, r18
 4e4:	88 bb       	out	0x18, r24	; 24
 4e6:	80 e0       	ldi	r24, 0x00	; 0
 4e8:	08 95       	ret
 4ea:	25 b3       	in	r18, 0x15	; 21
 4ec:	81 e0       	ldi	r24, 0x01	; 1
 4ee:	90 e0       	ldi	r25, 0x00	; 0
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <DIO_write+0xe2>
 4f2:	88 0f       	add	r24, r24
 4f4:	99 1f       	adc	r25, r25
 4f6:	6a 95       	dec	r22
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <DIO_write+0xde>
 4fa:	82 2b       	or	r24, r18
 4fc:	85 bb       	out	0x15, r24	; 21
 4fe:	80 e0       	ldi	r24, 0x00	; 0
 500:	08 95       	ret
 502:	22 b3       	in	r18, 0x12	; 18
 504:	81 e0       	ldi	r24, 0x01	; 1
 506:	90 e0       	ldi	r25, 0x00	; 0
 508:	02 c0       	rjmp	.+4      	; 0x50e <DIO_write+0xfa>
 50a:	88 0f       	add	r24, r24
 50c:	99 1f       	adc	r25, r25
 50e:	6a 95       	dec	r22
 510:	e2 f7       	brpl	.-8      	; 0x50a <DIO_write+0xf6>
 512:	82 2b       	or	r24, r18
 514:	82 bb       	out	0x12, r24	; 18
 516:	80 e0       	ldi	r24, 0x00	; 0
 518:	08 95       	ret
 51a:	82 e0       	ldi	r24, 0x02	; 2
 51c:	08 95       	ret
 51e:	83 e0       	ldi	r24, 0x03	; 3
 520:	08 95       	ret
 522:	81 e0       	ldi	r24, 0x01	; 1
 524:	08 95       	ret
 526:	81 e0       	ldi	r24, 0x01	; 1
 528:	08 95       	ret

0000052a <DIO_read>:
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)		// Read dio
{
	EN_dioError_t error = DIO_OK;
	if (pinNumber < 8)
 52a:	68 30       	cpi	r22, 0x08	; 8
 52c:	d8 f5       	brcc	.+118    	; 0x5a4 <DIO_read+0x7a>
	{

		switch(portNumber)
 52e:	82 34       	cpi	r24, 0x42	; 66
 530:	a9 f0       	breq	.+42     	; 0x55c <DIO_read+0x32>
 532:	18 f4       	brcc	.+6      	; 0x53a <DIO_read+0x10>
 534:	81 34       	cpi	r24, 0x41	; 65
 536:	31 f0       	breq	.+12     	; 0x544 <DIO_read+0x1a>
 538:	37 c0       	rjmp	.+110    	; 0x5a8 <DIO_read+0x7e>
 53a:	83 34       	cpi	r24, 0x43	; 67
 53c:	d9 f0       	breq	.+54     	; 0x574 <DIO_read+0x4a>
 53e:	84 34       	cpi	r24, 0x44	; 68
 540:	29 f1       	breq	.+74     	; 0x58c <DIO_read+0x62>
 542:	32 c0       	rjmp	.+100    	; 0x5a8 <DIO_read+0x7e>
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
 544:	89 b3       	in	r24, 0x19	; 25
 546:	90 e0       	ldi	r25, 0x00	; 0
 548:	02 c0       	rjmp	.+4      	; 0x54e <DIO_read+0x24>
 54a:	95 95       	asr	r25
 54c:	87 95       	ror	r24
 54e:	6a 95       	dec	r22
 550:	e2 f7       	brpl	.-8      	; 0x54a <DIO_read+0x20>
 552:	81 70       	andi	r24, 0x01	; 1
 554:	fa 01       	movw	r30, r20
 556:	80 83       	st	Z, r24
	}
	return error;
}
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)		// Read dio
{
	EN_dioError_t error = DIO_OK;
 558:	80 e0       	ldi	r24, 0x00	; 0
	if (pinNumber < 8)
	{

		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
 55a:	08 95       	ret
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
 55c:	86 b3       	in	r24, 0x16	; 22
 55e:	90 e0       	ldi	r25, 0x00	; 0
 560:	02 c0       	rjmp	.+4      	; 0x566 <DIO_read+0x3c>
 562:	95 95       	asr	r25
 564:	87 95       	ror	r24
 566:	6a 95       	dec	r22
 568:	e2 f7       	brpl	.-8      	; 0x562 <DIO_read+0x38>
 56a:	81 70       	andi	r24, 0x01	; 1
 56c:	fa 01       	movw	r30, r20
 56e:	80 83       	st	Z, r24
	}
	return error;
}
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)		// Read dio
{
	EN_dioError_t error = DIO_OK;
 570:	80 e0       	ldi	r24, 0x00	; 0
	{

		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
 572:	08 95       	ret
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
 574:	83 b3       	in	r24, 0x13	; 19
 576:	90 e0       	ldi	r25, 0x00	; 0
 578:	02 c0       	rjmp	.+4      	; 0x57e <DIO_read+0x54>
 57a:	95 95       	asr	r25
 57c:	87 95       	ror	r24
 57e:	6a 95       	dec	r22
 580:	e2 f7       	brpl	.-8      	; 0x57a <DIO_read+0x50>
 582:	81 70       	andi	r24, 0x01	; 1
 584:	fa 01       	movw	r30, r20
 586:	80 83       	st	Z, r24
	}
	return error;
}
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)		// Read dio
{
	EN_dioError_t error = DIO_OK;
 588:	80 e0       	ldi	r24, 0x00	; 0

		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
 58a:	08 95       	ret
			case PORT_D:	*value = GET_BIT(PIND,pinNumber);		break;
 58c:	80 b3       	in	r24, 0x10	; 16
 58e:	90 e0       	ldi	r25, 0x00	; 0
 590:	02 c0       	rjmp	.+4      	; 0x596 <DIO_read+0x6c>
 592:	95 95       	asr	r25
 594:	87 95       	ror	r24
 596:	6a 95       	dec	r22
 598:	e2 f7       	brpl	.-8      	; 0x592 <DIO_read+0x68>
 59a:	81 70       	andi	r24, 0x01	; 1
 59c:	fa 01       	movw	r30, r20
 59e:	80 83       	st	Z, r24
	}
	return error;
}
EN_dioError_t DIO_read(uint8_t portNumber, uint8_t pinNumber, uint8_t *value)		// Read dio
{
	EN_dioError_t error = DIO_OK;
 5a0:	80 e0       	ldi	r24, 0x00	; 0
		switch(portNumber)
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
			case PORT_D:	*value = GET_BIT(PIND,pinNumber);		break;
 5a2:	08 95       	ret
			default:		error = WRONG_PORT_NUMBER;				break;
		}
	}
	else
	{
		error = WRONG_PIN_NUMBER;
 5a4:	82 e0       	ldi	r24, 0x02	; 2
 5a6:	08 95       	ret
		{
			case PORT_A:	*value = GET_BIT(PINA,pinNumber);		break;
			case PORT_B:	*value = GET_BIT(PINB,pinNumber);		break;
			case PORT_C:	*value = GET_BIT(PINC,pinNumber);		break;
			case PORT_D:	*value = GET_BIT(PIND,pinNumber);		break;
			default:		error = WRONG_PORT_NUMBER;				break;
 5a8:	81 e0       	ldi	r24, 0x01	; 1
	else
	{
		error = WRONG_PIN_NUMBER;
	}
	return error;
 5aa:	08 95       	ret

000005ac <__tablejump2__>:
 5ac:	ee 0f       	add	r30, r30
 5ae:	ff 1f       	adc	r31, r31
 5b0:	05 90       	lpm	r0, Z+
 5b2:	f4 91       	lpm	r31, Z
 5b4:	e0 2d       	mov	r30, r0
 5b6:	09 94       	ijmp

000005b8 <_exit>:
 5b8:	f8 94       	cli

000005ba <__stop_program>:
 5ba:	ff cf       	rjmp	.-2      	; 0x5ba <__stop_program>
